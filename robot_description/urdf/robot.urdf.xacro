<?xml version='1.0'?>

<robot name="my_robot" xmlns:xacro="http://www.ros.org/wiki/xacro">
	<xacro:property name="robot_name" value="my_robot" />
	<xacro:property name="robot_chassis_mass" value="${robot_chassis_density*robot_chassis_length*robot_chassis_width*robot_chassis_height}"/>
	<xacro:property name="robot_chassis_length" value="0.5"/>
	<xacro:property name="robot_chassis_width" value="0.3"/>
	<xacro:property name="robot_chassis_height" value="0.3"/>
	

	<xacro:property name="robot_wheel_mass" value="${robot_wheel_density*pi_constant*robot_wheel_radius*robot_wheel_radius*robot_wheel_length}"/>
	<xacro:property name="robot_wheel_length" value="0.07"/>
	<xacro:property name="robot_wheel_radius" value="0.06"/>
	<xacro:property name="robot_wheel_link_z_location" value="-0.1"/>


	<xacro:property name="robot_chassis_density" value="2710.0"/>
	<xacro:property name="robot_wheel_density" value="2710.0"/>

	<xacro:property name="pi_constant" value="3.14159265"/>

	<xacro:property name="camera_mass" value="0.5"/>
	<xacro:property name="hokoyu_mass" value="0.3"/>

	<xacro:property name="container_length" value="0.28"/> <!-- Length of the container -->
	<xacro:property name="container_width" value="0.18"/>  <!-- Width of the container -->
	<xacro:property name="container_height" value="0.08"/> <!-- Height of the container -->
	<xacro:property name="container_mass" value="0.2"/>   <!-- Mass of the container -->

	<!--

	<xacro:property name="wheel_ixx" value="0.034375" />
  	<xacro:property name="wheel_iyy" value="0.034375" />
  	<xacro:property name="wheel_izz" value="0.05625" />

	-->

	<xacro:property name="Iz_wheel" value="${0.5*robot_wheel_mass*robot_wheel_radius*robot_wheel_radius}" />
	<xacro:property name="I_wheel" value="${(1.0/12.0)*robot_wheel_mass*(3.0*robot_wheel_radius*robot_wheel_radius+robot_wheel_length*robot_wheel_length)}" />

	<xacro:macro name="inertia_wheel" >
		<inertial>
			<origin rpy="0 0 0" xyz="0 0 0" />
			<mass value="${robot_wheel_mass}" />
			<inertia ixx="${I_wheel}" ixy="0.0" ixz="0.0" iyy="${I_wheel}" iyz="0" izz="${Iz_wheel}" />
		</inertial>
	</xacro:macro>


	<material name="green">
    	<color rgba="0.0 1.0 0.0 1.0" />
  	</material>

	<material name="blue">
    	<color rgba="0.0 0.0 1.0 1.0" />
  	</material>

	<material name="red">
    	<color rgba="1.0 0.0 0.0 1.0" />
	</material>

	<material name="grey">
		<color rgba="0.5 0.5 0.5 1.0" /> <!-- Grey color -->
	</material>

	<material name="black">
		<color rgba="0.0 0.0 0.0 1.0" /> <!-- Black color -->
	</material>

	<material name="white">
    	<color rgba="1.0 1.0 1.0 1.0" /> <!-- White color -->
	</material>

	<link name="base_link"></link>
	<joint name="base_link_joint" type="fixed">
		<parent link="base_link"/>
		<child link="chassis" />
	</joint>
	<!--
	<joint name="base_link_joint" type="fixed">
		<origin xyz="0 0 0" rpy="0 0 0" />
		<parent link="base_link"/>
		<child link="chassis" />
	</joint> -->

	<!-- Make Chassis of Bot -->
	<link name="chassis">
		<!-- <pose>0 0 0.1 0 0 0</pose> -->

		<inertial>
			<mass value="${robot_chassis_mass}"/>
      		<origin xyz="0 0 0" rpy=" 0 0 0"/>

      		<inertia 
      			ixx="${(1/12)*robot_chassis_mass*(robot_chassis_width*robot_chassis_width+robot_chassis_height*robot_chassis_height)}" ixy="0" ixz="0"
      			iyy="${(1/12)*robot_chassis_mass*(robot_chassis_length*robot_chassis_length+robot_chassis_height*robot_chassis_height)}" iyz="0"
      			izz="${(1/12)*robot_chassis_mass*(robot_chassis_length*robot_chassis_length+robot_chassis_height*robot_chassis_height)}"
      		/>
		</inertial>

		<collision name="collision">
			<origin xyz="0 0 0" rpy=" 0 0 0"/>
			<geometry>
				<box size="${robot_chassis_length} ${robot_chassis_width} ${robot_chassis_height}"/>
			</geometry>
		</collision>

		<visual name="chassis_visual">
			<geometry>
				<box size="${robot_chassis_length} ${robot_chassis_width} ${robot_chassis_height}" />
			</geometry>
			<material name="grey" />
		<origin rpy="0 0 0" xyz="0 0 0" />
		</visual>
	</link>

	<!--
	<joint name="base_link_joint" type="fixed">
		<origin xyz="0 0 ${robot_wheel_radius}" rpy="0 0 0" />
		<parent link="base_link"/>
		<child link="chassis" />
	</joint> -->



	<!-- Right Wheel Back -->
	<link name="right_wheel_back">
		<!--
		<inertial>
			<mass value="${robot_wheel_mass}"/>
			<origin xyz="0 0 0" rpy="0 1.5707 1.5707"/>
			<inertia
				ixx="${wheel_ixx}" ixy="0.0" ixz="0.0"
				iyy="${wheel_iyy}" iyz="0.0"
				izz="${wheel_izz}"
			/>
		</inertial> -->

		<visual>
			<origin xyz="0 0 0" rpy="1.570795 0 0"/>
			<geometry>
				<cylinder radius="${robot_wheel_radius}" length="${robot_wheel_length}"/>
			</geometry>
			<material name="black" />
		</visual>

		<collision>
			<origin xyz="0 0 0" rpy="1.570795 0 0"/>
			<geometry>
				<cylinder radius="${robot_wheel_radius}" length="${robot_wheel_length}"/>
			</geometry>
		</collision>
		<xacro:inertia_wheel />

	</link>



	<!-- Right Wheel Front-->
	<link name="right_wheel_front">
		<!--
		<inertial>
			<mass value="${robot_wheel_mass}"/>
			<origin xyz="0 0 0" rpy="0 1.5707 1.5707"/>
			<inertia
				ixx="${wheel_ixx}" ixy="0.0" ixz="0.0"
				iyy="${wheel_iyy}" iyz="0.0"
				izz="${wheel_izz}"
			/>
		</inertial> -->

		<visual>
			<origin xyz="0 0 0" rpy="1.5707 0 0"/>
			<geometry>
				<cylinder radius="${robot_wheel_radius}" length="${robot_wheel_length}"/>
			</geometry>
			<material  name="black" />
		</visual>

		<collision>
			<origin xyz="0 0 0" rpy="1.5707 0 0"/>
			<geometry>
				<cylinder radius="${robot_wheel_radius}" length="${robot_wheel_length}"/>
			</geometry>
		</collision>
		<xacro:inertia_wheel/> 

	</link>



	<!-- Left wheel Back-->
	<link name="left_wheel_back">
	    <!--
		<inertial>
			<mass value="${robot_wheel_mass}"/>
			<origin xyz="0 0 0" rpy="0 1.5707 1.5707"/>
			<inertia
				ixx="${wheel_ixx}" ixy="0.0" ixz="0.0"
				iyy="${wheel_iyy}" iyz="0.0"
				izz="${wheel_izz}"
			/>
		</inertial> -->

		<visual>
			<origin xyz="0 0 0" rpy="1.5707 0 0"/>
			<geometry>
				<cylinder radius="${robot_wheel_radius}" length="${robot_wheel_length}"/>
			</geometry>
			<material name="black" />
		</visual>

		<collision>
			<origin xyz="0 0 0" rpy="1.5707 0 0"/>
			<geometry>
				<cylinder radius="${robot_wheel_radius}" length="${robot_wheel_length}"/>
			</geometry>
		</collision>
		<xacro:inertia_wheel />

	</link>

	<!-- Left wheel Front-->
	<link name="left_wheel_front">
		<!--
		<inertial>
			<mass value="${robot_wheel_mass}"/>
			<origin xyz="0 0 0" rpy="0 1.5707 1.5707"/>
			<inertia
				ixx="${wheel_ixx}" ixy="0.0" ixz="0.0"
				iyy="${wheel_iyy}" iyz="0.0"
				izz="${wheel_izz}"
			/>
		</inertial> -->

		<visual>
			<origin xyz="0 0 0" rpy="1.570795 0 0"/>
			<geometry>
				<cylinder radius="${robot_wheel_radius}" length="${robot_wheel_length}"/>
			</geometry>
			<material name="black" />
		</visual>

		<collision>
			<origin xyz="0 0 0" rpy="1.570795 0 0"/>
			<geometry>
				<cylinder radius="${robot_wheel_radius}" length="${robot_wheel_length}"/>
			</geometry>
		</collision>
		<xacro:inertia_wheel />


	</link>

	<!--
	<link name="container">
		<inertial>
			<mass value="${container_mass}"/>
			<origin xyz="0 0 0" rpy="0 0 0"/>
			<inertia
				ixx="${(1/12)*container_mass*(container_width*container_width + container_height*container_height)}" ixy="0" ixz="0"
				iyy="${(1/12)*container_mass*(container_length*container_length + container_height*container_height)}" iyz="0"
				izz="${(1/12)*container_mass*(container_length*container_length + container_width*container_width)}"
			/>
		</inertial>

		<collision name="container_collision">
			<origin xyz="0 0 0" rpy="0 0 0"/>
			<geometry>
				<box size="${container_length} ${container_width} ${container_height}"/>
			</geometry>
		</collision>

		<visual name="container_visual">
			<geometry>
				<box size="${container_length} ${container_width} ${container_height}" />
			</geometry>
			<material name="red" />
			<origin rpy="0 0 0" xyz="0 0 0" />
		</visual>
	</link>
	-->

	<link name="container">
		<inertial>
			<mass value="${container_mass}"/>
			<origin xyz="0 0 0" rpy="0 0 0"/>
			<inertia
				ixx="${(1/12)*container_mass*(container_width*container_width + container_height*container_height)}" ixy="0" ixz="0"
				iyy="${(1/12)*container_mass*(container_length*container_length + container_height*container_height)}" iyz="0"
				izz="${(1/12)*container_mass*(container_length*container_length + container_width*container_width)}"
			/>
		</inertial>

		<!-- Bottom Plate -->
		<visual name="container_bottom">
			<origin xyz="0 0 -${container_height/2}" rpy="0 0 0"/>
			<geometry>
				<box size="${container_length} ${container_width} 0.01"/>
			</geometry>
			<material name="red"/>
		</visual>
		<collision name="container_bottom_collision">
			<origin xyz="0 0 -${container_height/2}" rpy="0 0 0"/>
			<geometry>
				<box size="${container_length} ${container_width} 0.01"/>
			</geometry>
		</collision>

		<!-- Front Wall -->
		<visual name="container_front">
			<origin xyz="0 ${container_width/2} 0" rpy="0 0 0"/>
			<geometry>
				<box size="${container_length} 0.01 ${container_height}"/>
			</geometry>
			<material name="red"/>
		</visual>
		<collision name="container_front_collision">
			<origin xyz="0 ${container_width/2} 0" rpy="0 0 0"/>
			<geometry>
				<box size="${container_length} 0.01 ${container_height}"/>
			</geometry>
		</collision>

		<!-- Back Wall -->
		<visual name="container_back">
			<origin xyz="0 -${container_width/2} 0" rpy="0 0 0"/>
			<geometry>
				<box size="${container_length} 0.01 ${container_height}"/>
			</geometry>
			<material name="red"/>
		</visual>
		<collision name="container_back_collision">
			<origin xyz="0 -${container_width/2} 0" rpy="0 0 0"/>
			<geometry>
				<box size="${container_length} 0.01 ${container_height}"/>
			</geometry>
		</collision>

		<!-- Left Wall -->
		<visual name="container_left">
			<origin xyz="${container_length/2} 0 0" rpy="0 0 0"/>
			<geometry>
				<box size="0.01 ${container_width} ${container_height}"/>
			</geometry>
			<material name="red"/>
		</visual>
		<collision name="container_left_collision">
			<origin xyz="${container_length/2} 0 0" rpy="0 0 0"/>
			<geometry>
				<box size="0.01 ${container_width} ${container_height}"/>
			</geometry>
		</collision>

		<!-- Right Wall -->
		<visual name="container_right">
			<origin xyz="-${container_length/2} 0 0" rpy="0 0 0"/>
			<geometry>
				<box size="0.01 ${container_width} ${container_height}"/>
			</geometry>
			<material name="red"/>
		</visual>
		<collision name="container_right_collision">
			<origin xyz="-${container_length/2} 0 0" rpy="0 0 0"/>
			<geometry>
				<box size="0.01 ${container_width} ${container_height}"/>
			</geometry>
		</collision>
	</link>

	<!-- Camera -->
	<link name="camera">
		<inertial>
			<mass value="${camera_mass}"/>
			<origin xyz="0 0 0" rpy="0 0 0"/>
			<inertia
		        ixx="1e-6" ixy="0.0" ixz="0.0"
		        iyy="1e-6" iyz="0.0"
		        izz="1e-6"
		      />
		</inertial>

		<visual>
			<origin xyz="0 0 0" rpy="0 0 0"/>
			<geometry>
				<box size="0.05 0.05 0.05"/>
			</geometry>
		</visual>

		<collision>
			<origin xyz="0 0 0" rpy="0 0 0"/>
			<geometry>
				<box size="0.05 0.05 0.05"/>
			</geometry>
		</collision>
	</link>

	<!-- Hokuyo Lidar -->
	<link name="hokuyo">
		<inertial>
			<mass value="${hokoyu_mass}"/>
			<origin xyz="0 0 0" rpy="0 0 0"/>

			<inertia
		        ixx="1e-6" ixy="0.0" ixz="0.0"
		        iyy="1e-6" iyz="0.0"
		        izz="1e-6"
		      />
		</inertial>

		<visual>
			<origin xyz="0 0 0" rpy="0 0 0"/>
			<geometry>
				<mesh filename="package://robot_description/meshes/hokuyo.dae"/>
			</geometry>
		</visual>

		<collision>
			<origin xyz="0 0 0" rpy="0 0 0"/>
			<geometry>
				<box size="0.1 0.1 0.1"/>
			</geometry>
		</collision>
	</link>



	<!--Joints -->

	<!-- Right Wheel Joint Back-->
	<joint type="continuous" name="right_wheel_hinge_back">
	    <origin xyz="${-robot_chassis_length/2 + 1.2*robot_wheel_radius} ${-robot_chassis_width/2 - robot_wheel_length/2} ${robot_wheel_link_z_location}" rpy="0 0 0" />
	    <parent link="chassis"/>
	    <child link="right_wheel_back" />
	    <axis xyz="0 1 0"/>
	    <limit effort="10000" velocity="1000" />
	    <dynamics damping="1.0" friction="1.0" />
	</joint>

	<!-- Right Wheel Joint Front-->
	<joint type="continuous" name="right_wheel_hinge_front">
	    <origin xyz="${robot_chassis_length/2 - 1.2*robot_wheel_radius} ${-robot_chassis_width/2 - robot_wheel_length/2} ${robot_wheel_link_z_location}" rpy="0 0 0" />
	    <parent link="chassis"/>
	    <child link="right_wheel_front" />
	    <axis xyz="0 1 0"/>
	    <limit effort="10000" velocity="1000" />
	    <dynamics damping="1.0" friction="1.0" />
	</joint>


	<!-- Left Wheel Joint Back-->
	<joint type="continuous" name="left_wheel_hinge_back">
	    <origin xyz="${-robot_chassis_length/2 + 1.2*robot_wheel_radius} ${robot_chassis_width/2 + robot_wheel_length/2} ${robot_wheel_link_z_location}" rpy="0 0 0" />
	    <parent link="chassis"/>
	    <child link="left_wheel_back" />
	    <axis xyz="0 1 0"/>
	    <limit effort="10000" velocity="1000" />
	    <dynamics damping="1.0" friction="1.0" />
	</joint>

	<!-- Left Wheel Joint Front-->
	<joint type="continuous" name="left_wheel_hinge_front">
	    <origin xyz="${robot_chassis_length/2 - 1.2*robot_wheel_radius} ${robot_chassis_width/2 + robot_wheel_length/2} ${robot_wheel_link_z_location}" rpy="0 0 0" />
	    <parent link="chassis"/>
	    <child link="left_wheel_front" />
	    <axis xyz="0 1 0"/>
	    <limit effort="10000" velocity="1000" />
	    <dynamics damping="1.0" friction="1.0" />
	</joint>

	<!-- Camera Joint -->
	<joint name="camera_joint" type="fixed">
		<origin xyz="0.252 0 ${robot_chassis_height/4}" rpy="0 0 0" />
		<parent link="chassis"/>
		<child link="camera" />
		<axis xyz="0 1 0"/>
	</joint>

	<!-- Hokoyu Joint -->
	<joint name="hokuyo_joint" type="fixed">
	    <origin xyz="0.2 0 ${robot_chassis_height/2+0.0375}" rpy="0 0 0" />
	    <parent link="chassis"/>
	    <child link="hokuyo" />  
	    <axis xyz="0 1 0"/> 
	</joint>

	<joint name="container_joint" type="fixed">
		<origin xyz="0 0 ${robot_chassis_height/2 + container_height/2}" rpy="0 0 0" />
		<parent link="chassis"/>
		<child link="container" />
		<axis xyz="0 1 0"/>
	</joint>


	<!-- Color of bot -->
	<gazebo reference="left_wheel_front">
		<material>Gazebo/Black</material>
		<kp>1000000.0</kp> <!-- kp and kd for rubber -->
		<kd>100.0</kd>
		<mu1>1.0</mu1>
		<mu2>1.0</mu2>
		<maxVel>1.0</maxVel>
		<minDepth>0.00</minDepth>
	</gazebo>

	<gazebo reference="left_wheel_back">
		<material>Gazebo/Black</material>
		<kp>1000000.0</kp> <!-- kp and kd for rubber -->
		<kd>100.0</kd>
		<mu1>1.0</mu1>
		<mu2>1.0</mu2>
		<maxVel>1.0</maxVel>
		<minDepth>0.00</minDepth>
	</gazebo>

	<gazebo reference="right_wheel_front">
		<material>Gazebo/Black</material>
		<kp>1000000.0</kp> <!-- kp and kd for rubber -->
		<kd>100.0</kd>
		<mu1>1.0</mu1>
		<mu2>1.0</mu2>
		<maxVel>1.0</maxVel>
		<minDepth>0.00</minDepth>
	</gazebo>
	<gazebo reference="right_wheel_back">
		<material>Gazebo/Black</material>
		<kp>1000000.0</kp> <!-- kp and kd for rubber -->
		<kd>100.0</kd>
		<mu1>1.0</mu1>
		<mu2>1.0</mu2>
		<maxVel>1.0</maxVel>
		<minDepth>0.00</minDepth>
	</gazebo>


	<gazebo reference="camera">
		<material>Gazebo/Red</material>
	</gazebo>

	<gazebo reference="chassis">
		<material>Gazebo/Grey</material>
	</gazebo>

	<gazebo reference="container">
		<material>Gazebo/White</material>
	</gazebo>

	<!-- Motor, Camera and Lidar Simulation -->
	<xacro:include filename="$(find robot_description)/urdf/my_robot.gazebo" />

</robot>