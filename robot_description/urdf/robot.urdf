<?xml version="1.0" ?>
<!-- =================================================================================== -->
<!-- |    This document was autogenerated by xacro from robot.urdf.xacro               | -->
<!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->
<!-- =================================================================================== -->
<robot name="my_robot">
  <!-- Mass of the container -->
  <!--

	<xacro:property name="wheel_ixx" value="0.034375" />
  	<xacro:property name="wheel_iyy" value="0.034375" />
  	<xacro:property name="wheel_izz" value="0.05625" />

	-->
  <material name="green">
    <color rgba="0.0 1.0 0.0 1.0"/>
  </material>
  <material name="blue">
    <color rgba="0.0 0.0 1.0 1.0"/>
  </material>
  <material name="red">
    <color rgba="1.0 0.0 0.0 1.0"/>
  </material>
  <material name="grey">
    <color rgba="0.5 0.5 0.5 1.0"/>
    <!-- Grey color -->
  </material>
  <material name="black">
    <color rgba="0.0 0.0 0.0 1.0"/>
    <!-- Black color -->
  </material>
  <material name="white">
    <color rgba="1.0 1.0 1.0 1.0"/>
    <!-- White color -->
  </material>
  <link name="base_link"/>
  <joint name="base_link_joint" type="fixed">
    <parent link="base_link"/>
    <child link="chassis"/>
  </joint>
  <!--
	<joint name="base_link_joint" type="fixed">
		<origin xyz="0 0 0" rpy="0 0 0" />
		<parent link="base_link"/>
		<child link="chassis" />
	</joint> -->
  <!-- Make Chassis of Bot -->
  <link name="chassis">
    <!-- <pose>0 0 0.1 0 0 0</pose> -->
    <inertial>
      <mass value="121.94999999999999"/>
      <origin rpy=" 0 0 0" xyz="0 0 0"/>
      <inertia ixx="1.8292499999999996" ixy="0" ixz="0" iyy="3.455249999999999" iyz="0" izz="3.455249999999999"/>
    </inertial>
    <collision name="collision">
      <origin rpy=" 0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.5 0.3 0.3"/>
      </geometry>
    </collision>
    <visual name="chassis_visual">
      <geometry>
        <box size="0.5 0.3 0.3"/>
      </geometry>
      <material name="grey"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </visual>
  </link>
  <!--
	<joint name="base_link_joint" type="fixed">
		<origin xyz="0 0 ${robot_wheel_radius}" rpy="0 0 0" />
		<parent link="base_link"/>
		<child link="chassis" />
	</joint> -->
  <!-- Right Wheel Back -->
  <link name="right_wheel_back">
    <!--
		<inertial>
			<mass value="${robot_wheel_mass}"/>
			<origin xyz="0 0 0" rpy="0 1.5707 1.5707"/>
			<inertia
				ixx="${wheel_ixx}" ixy="0.0" ixz="0.0"
				iyy="${wheel_iyy}" iyz="0.0"
				izz="${wheel_izz}"
			/>
		</inertial> -->
    <visual>
      <origin rpy="1.570795 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.07" radius="0.06"/>
      </geometry>
      <material name="black"/>
    </visual>
    <collision>
      <origin rpy="1.570795 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.07" radius="0.06"/>
      </geometry>
    </collision>
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <mass value="2.145456452538"/>
      <inertia ixx="0.00280697219207055" ixy="0.0" ixz="0.0" iyy="0.00280697219207055" iyz="0" izz="0.0038618216145684006"/>
    </inertial>
  </link>
  <!-- Right Wheel Front-->
  <link name="right_wheel_front">
    <!--
		<inertial>
			<mass value="${robot_wheel_mass}"/>
			<origin xyz="0 0 0" rpy="0 1.5707 1.5707"/>
			<inertia
				ixx="${wheel_ixx}" ixy="0.0" ixz="0.0"
				iyy="${wheel_iyy}" iyz="0.0"
				izz="${wheel_izz}"
			/>
		</inertial> -->
    <visual>
      <origin rpy="1.5707 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.07" radius="0.06"/>
      </geometry>
      <material name="black"/>
    </visual>
    <collision>
      <origin rpy="1.5707 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.07" radius="0.06"/>
      </geometry>
    </collision>
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <mass value="2.145456452538"/>
      <inertia ixx="0.00280697219207055" ixy="0.0" ixz="0.0" iyy="0.00280697219207055" iyz="0" izz="0.0038618216145684006"/>
    </inertial>
  </link>
  <!-- Left wheel Back-->
  <link name="left_wheel_back">
    <!--
		<inertial>
			<mass value="${robot_wheel_mass}"/>
			<origin xyz="0 0 0" rpy="0 1.5707 1.5707"/>
			<inertia
				ixx="${wheel_ixx}" ixy="0.0" ixz="0.0"
				iyy="${wheel_iyy}" iyz="0.0"
				izz="${wheel_izz}"
			/>
		</inertial> -->
    <visual>
      <origin rpy="1.5707 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.07" radius="0.06"/>
      </geometry>
      <material name="black"/>
    </visual>
    <collision>
      <origin rpy="1.5707 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.07" radius="0.06"/>
      </geometry>
    </collision>
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <mass value="2.145456452538"/>
      <inertia ixx="0.00280697219207055" ixy="0.0" ixz="0.0" iyy="0.00280697219207055" iyz="0" izz="0.0038618216145684006"/>
    </inertial>
  </link>
  <!-- Left wheel Front-->
  <link name="left_wheel_front">
    <!--
		<inertial>
			<mass value="${robot_wheel_mass}"/>
			<origin xyz="0 0 0" rpy="0 1.5707 1.5707"/>
			<inertia
				ixx="${wheel_ixx}" ixy="0.0" ixz="0.0"
				iyy="${wheel_iyy}" iyz="0.0"
				izz="${wheel_izz}"
			/>
		</inertial> -->
    <visual>
      <origin rpy="1.570795 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.07" radius="0.06"/>
      </geometry>
      <material name="black"/>
    </visual>
    <collision>
      <origin rpy="1.570795 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.07" radius="0.06"/>
      </geometry>
    </collision>
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <mass value="2.145456452538"/>
      <inertia ixx="0.00280697219207055" ixy="0.0" ixz="0.0" iyy="0.00280697219207055" iyz="0" izz="0.0038618216145684006"/>
    </inertial>
  </link>
  <!--
	<link name="container">
		<inertial>
			<mass value="${container_mass}"/>
			<origin xyz="0 0 0" rpy="0 0 0"/>
			<inertia
				ixx="${(1/12)*container_mass*(container_width*container_width + container_height*container_height)}" ixy="0" ixz="0"
				iyy="${(1/12)*container_mass*(container_length*container_length + container_height*container_height)}" iyz="0"
				izz="${(1/12)*container_mass*(container_length*container_length + container_width*container_width)}"
			/>
		</inertial>

		<collision name="container_collision">
			<origin xyz="0 0 0" rpy="0 0 0"/>
			<geometry>
				<box size="${container_length} ${container_width} ${container_height}"/>
			</geometry>
		</collision>

		<visual name="container_visual">
			<geometry>
				<box size="${container_length} ${container_width} ${container_height}" />
			</geometry>
			<material name="red" />
			<origin rpy="0 0 0" xyz="0 0 0" />
		</visual>
	</link>
	-->
  <link name="container">
    <inertial>
      <mass value="0.2"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.0006466666666666667" ixy="0" ixz="0" iyy="0.0014133333333333335" iyz="0" izz="0.0018466666666666668"/>
    </inertial>
    <!-- Bottom Plate -->
    <visual name="container_bottom">
      <origin rpy="0 0 0" xyz="0 0 -0.04"/>
      <geometry>
        <box size="0.28 0.18 0.01"/>
      </geometry>
      <material name="red"/>
    </visual>
    <collision name="container_bottom_collision">
      <origin rpy="0 0 0" xyz="0 0 -0.04"/>
      <geometry>
        <box size="0.28 0.18 0.01"/>
      </geometry>
    </collision>
    <!-- Front Wall -->
    <visual name="container_front">
      <origin rpy="0 0 0" xyz="0 0.09 0"/>
      <geometry>
        <box size="0.28 0.01 0.08"/>
      </geometry>
      <material name="red"/>
    </visual>
    <collision name="container_front_collision">
      <origin rpy="0 0 0" xyz="0 0.09 0"/>
      <geometry>
        <box size="0.28 0.01 0.08"/>
      </geometry>
    </collision>
    <!-- Back Wall -->
    <visual name="container_back">
      <origin rpy="0 0 0" xyz="0 -0.09 0"/>
      <geometry>
        <box size="0.28 0.01 0.08"/>
      </geometry>
      <material name="red"/>
    </visual>
    <collision name="container_back_collision">
      <origin rpy="0 0 0" xyz="0 -0.09 0"/>
      <geometry>
        <box size="0.28 0.01 0.08"/>
      </geometry>
    </collision>
    <!-- Left Wall -->
    <visual name="container_left">
      <origin rpy="0 0 0" xyz="0.14 0 0"/>
      <geometry>
        <box size="0.01 0.18 0.08"/>
      </geometry>
      <material name="red"/>
    </visual>
    <collision name="container_left_collision">
      <origin rpy="0 0 0" xyz="0.14 0 0"/>
      <geometry>
        <box size="0.01 0.18 0.08"/>
      </geometry>
    </collision>
    <!-- Right Wall -->
    <visual name="container_right">
      <origin rpy="0 0 0" xyz="-0.14 0 0"/>
      <geometry>
        <box size="0.01 0.18 0.08"/>
      </geometry>
      <material name="red"/>
    </visual>
    <collision name="container_right_collision">
      <origin rpy="0 0 0" xyz="-0.14 0 0"/>
      <geometry>
        <box size="0.01 0.18 0.08"/>
      </geometry>
    </collision>
  </link>
  <!-- Camera -->
  <link name="camera">
    <inertial>
      <mass value="0.5"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="1e-6" ixy="0.0" ixz="0.0" iyy="1e-6" iyz="0.0" izz="1e-6"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.05 0.05 0.05"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.05 0.05 0.05"/>
      </geometry>
    </collision>
  </link>
  <!-- Hokuyo Lidar -->
  <link name="hokuyo">
    <inertial>
      <mass value="0.3"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="1e-6" ixy="0.0" ixz="0.0" iyy="1e-6" iyz="0.0" izz="1e-6"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://robot_description/meshes/hokuyo.dae"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.1 0.1 0.1"/>
      </geometry>
    </collision>
  </link>
  <!--Joints -->
  <!-- Right Wheel Joint Back-->
  <joint name="right_wheel_hinge_back" type="continuous">
    <origin rpy="0 0 0" xyz="-0.178 -0.185 -0.1"/>
    <parent link="chassis"/>
    <child link="right_wheel_back"/>
    <axis xyz="0 1 0"/>
    <limit effort="10000" velocity="1000"/>
    <dynamics damping="1.0" friction="1.0"/>
  </joint>
  <!-- Right Wheel Joint Front-->
  <joint name="right_wheel_hinge_front" type="continuous">
    <origin rpy="0 0 0" xyz="0.178 -0.185 -0.1"/>
    <parent link="chassis"/>
    <child link="right_wheel_front"/>
    <axis xyz="0 1 0"/>
    <limit effort="10000" velocity="1000"/>
    <dynamics damping="1.0" friction="1.0"/>
  </joint>
  <!-- Left Wheel Joint Back-->
  <joint name="left_wheel_hinge_back" type="continuous">
    <origin rpy="0 0 0" xyz="-0.178 0.185 -0.1"/>
    <parent link="chassis"/>
    <child link="left_wheel_back"/>
    <axis xyz="0 1 0"/>
    <limit effort="10000" velocity="1000"/>
    <dynamics damping="1.0" friction="1.0"/>
  </joint>
  <!-- Left Wheel Joint Front-->
  <joint name="left_wheel_hinge_front" type="continuous">
    <origin rpy="0 0 0" xyz="0.178 0.185 -0.1"/>
    <parent link="chassis"/>
    <child link="left_wheel_front"/>
    <axis xyz="0 1 0"/>
    <limit effort="10000" velocity="1000"/>
    <dynamics damping="1.0" friction="1.0"/>
  </joint>
  <!-- Camera Joint -->
  <joint name="camera_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0.252 0 0.075"/>
    <parent link="chassis"/>
    <child link="camera"/>
    <axis xyz="0 1 0"/>
  </joint>
  <!-- Hokoyu Joint -->
  <joint name="hokuyo_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0.2 0 0.1875"/>
    <parent link="chassis"/>
    <child link="hokuyo"/>
    <axis xyz="0 1 0"/>
  </joint>
  <joint name="container_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0 0 0.19"/>
    <parent link="chassis"/>
    <child link="container"/>
    <axis xyz="0 1 0"/>
  </joint>
  <!-- Color of bot -->
  <gazebo reference="left_wheel_front">
    <material>Gazebo/Black</material>
    <kp>1000000.0</kp>
    <!-- kp and kd for rubber -->
    <kd>100.0</kd>
    <mu1>1.0</mu1>
    <mu2>1.0</mu2>
    <maxVel>1.0</maxVel>
    <minDepth>0.00</minDepth>
  </gazebo>
  <gazebo reference="left_wheel_back">
    <material>Gazebo/Black</material>
    <kp>1000000.0</kp>
    <!-- kp and kd for rubber -->
    <kd>100.0</kd>
    <mu1>1.0</mu1>
    <mu2>1.0</mu2>
    <maxVel>1.0</maxVel>
    <minDepth>0.00</minDepth>
  </gazebo>
  <gazebo reference="right_wheel_front">
    <material>Gazebo/Black</material>
    <kp>1000000.0</kp>
    <!-- kp and kd for rubber -->
    <kd>100.0</kd>
    <mu1>1.0</mu1>
    <mu2>1.0</mu2>
    <maxVel>1.0</maxVel>
    <minDepth>0.00</minDepth>
  </gazebo>
  <gazebo reference="right_wheel_back">
    <material>Gazebo/Black</material>
    <kp>1000000.0</kp>
    <!-- kp and kd for rubber -->
    <kd>100.0</kd>
    <mu1>1.0</mu1>
    <mu2>1.0</mu2>
    <maxVel>1.0</maxVel>
    <minDepth>0.00</minDepth>
  </gazebo>
  <gazebo reference="camera">
    <material>Gazebo/Red</material>
  </gazebo>
  <gazebo reference="chassis">
    <material>Gazebo/Grey</material>
  </gazebo>
  <gazebo reference="container">
    <material>Gazebo/White</material>
  </gazebo>
  <gazebo reference="chassis">
    <mu1>0.2</mu1>
    <mu2>0.2</mu2>
  </gazebo>
  <gazebo reference="right_wheel_back">
    <mu1>0.2</mu1>
    <mu2>0.2</mu2>
  </gazebo>
  <gazebo reference="left_wheel_back">
    <mu1>0.2</mu1>
    <mu2>0.2</mu2>
  </gazebo>
  <gazebo reference="right_wheel_front">
    <mu1>0.2</mu1>
    <mu2>0.2</mu2>
  </gazebo>
  <gazebo reference="left_wheel_front">
    <mu1>0.2</mu1>
    <mu2>0.2</mu2>
  </gazebo>
  <gazebo>
    <plugin filename="libexample_plugin.so" name="example_plugin">
      <pose>-5 0 0 0 0 0</pose>
      <!-- x y z roll pitch yaw -->
    </plugin>
  </gazebo>
  <gazebo>
    <!-- Controller - a virtual device that receives commands from keyboard and transform these commands into revolute motions -->
    <plugin filename="libgazebo_ros_skid_steer_drive.so" name="skid_steer_drive_controller">
      <updateRate>100.0</updateRate>
      <robotNamespace> </robotNamespace>
      <leftFrontJoint>left_wheel_hinge_front</leftFrontJoint>
      <rightFrontJoint>right_wheel_hinge_front</rightFrontJoint>
      <leftRearJoint>left_wheel_hinge_back</leftRearJoint>
      <rightRearJoint>right_wheel_hinge_back</rightRearJoint>
      <wheelSeparation>0.37</wheelSeparation>
      <wheelDiameter>0.12</wheelDiameter>
      <torque>1000</torque>
      <broadcastTF>true</broadcastTF>
      <!-- topic to receive geometry_msgs/Twist message commands -->
      <topicName>cmd_vel</topicName>
      <commandTopic>cmd_vel</commandTopic>
      <topic_name_twist>cmd_vel</topic_name_twist>
      <!-- topic to publish nav_msgs/Odometry messages -->
      <odometryTopic>odom</odometryTopic>
      <topic_name_odometry>odom</topic_name_odometry>
      <!-- Defining odometry frame -->
      <odometryFrame>odom</odometryFrame>
      <!-- Robot base frame to calculate the odometry -->
      <robotBaseFrame>base_link</robotBaseFrame>
      <!-- set to true to publish transforms for wheel links defaults to false -->
      <publishWheelTF>true</publishWheelTF>
      <!-- set to true to publish transforms for the odom defaults to false -->
      <publishOdom>true</publishOdom>
      <!-- Set to publish transforms for the odometry , defaults to true-->
      <publishWheelJointState>true</publishWheelJointState>
      <topic_name_joint>joint</topic_name_joint>
      <covariance_x>0.0001</covariance_x>
      <covariance_y>0.0001</covariance_y>
      <covariance_yaw>0.01</covariance_yaw>
    </plugin>
  </gazebo>
  <!-- camera -->
  <gazebo reference="camera">
    <sensor name="camera1" type="camera">
      <update_rate>30.0</update_rate>
      <camera name="head">
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>800</width>
          <height>800</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
      </camera>
      <plugin filename="libgazebo_ros_camera.so" name="camera_controller">
        <robotNamespace> </robotNamespace>
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>camera</cameraName>
        <imageTopicName>rgb/image_raw</imageTopicName>
        <cameraInfoTopicName>rgb/camera_info</cameraInfoTopicName>
        <frameName>camera</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>
  <!-- hokuyo -->
  <gazebo reference="hokuyo">
    <sensor name="head_hokuyo_sensor" type="ray">
      <pose>0 0 0 0 0 0</pose>
      <visualize>false</visualize>
      <update_rate>40</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>720</samples>
            <resolution>1</resolution>
            <min_angle>-1.570796</min_angle>
            <max_angle>1.570796</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.10</min>
          <max>30.0</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <!-- Noise parameters based on published spec for Hokuyo laser
               achieving "+-30mm" accuracy at range < 10m.  A mean of 0.0m and
               stddev of 0.01m will put 99.7% of samples within 0.03m of the true
               reading. -->
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin filename="libgazebo_ros_laser.so" name="gazebo_ros_head_hokuyo_controller">
        <topicName>/scan</topicName>
        <frameName>hokuyo</frameName>
        <robotNamespace> </robotNamespace>
      </plugin>
    </sensor>
  </gazebo>
</robot>

