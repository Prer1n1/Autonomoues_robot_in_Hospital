<?xml version="1.0"?>
<robot>

  <gazebo reference="chassis">
  <mu1>0.2</mu1>
  <mu2>0.2</mu2>
  </gazebo>

  <gazebo reference="right_wheel_back">
  <mu1>0.2</mu1>
  <mu2>0.2</mu2>
  </gazebo>

  <gazebo reference="left_wheel_back">
  <mu1>0.2</mu1>
  <mu2>0.2</mu2>
  </gazebo>

  <gazebo reference="right_wheel_front">
  <mu1>0.2</mu1>
  <mu2>0.2</mu2>
  </gazebo>

  <gazebo reference="left_wheel_front">
  <mu1>0.2</mu1>
  <mu2>0.2</mu2>
  </gazebo>
  
  <gazebo>
    <plugin name="example_plugin" filename="libexample_plugin.so">
      <pose>-5 0 0 0 0 0</pose> <!-- x y z roll pitch yaw -->
    </plugin>
  </gazebo>

  <gazebo>
    
    <!-- Controller - a virtual device that receives commands from keyboard and transform these commands into revolute motions -->
    <plugin name="skid_steer_drive_controller" filename="libgazebo_ros_skid_steer_drive.so">
      <updateRate>100.0</updateRate>
      <robotNamespace> </robotNamespace>
      <leftFrontJoint>left_wheel_hinge_front</leftFrontJoint>
      <rightFrontJoint>right_wheel_hinge_front</rightFrontJoint>
      <leftRearJoint>left_wheel_hinge_back</leftRearJoint>
      <rightRearJoint>right_wheel_hinge_back</rightRearJoint>
      <wheelSeparation>${robot_chassis_width+robot_wheel_length}</wheelSeparation>
      <wheelDiameter>${2*robot_wheel_radius}</wheelDiameter>
      <torque>1000</torque>

      <broadcastTF>true</broadcastTF>
      <!-- topic to receive geometry_msgs/Twist message commands -->
      <topicName>cmd_vel</topicName>
      <commandTopic>cmd_vel</commandTopic>
      <topic_name_twist>cmd_vel</topic_name_twist>
      <!-- topic to publish nav_msgs/Odometry messages -->
      <odometryTopic>odom</odometryTopic>
      <topic_name_odometry>odom</topic_name_odometry>
      <!-- Defining odometry frame -->
      <odometryFrame>odom</odometryFrame>
      <!-- Robot base frame to calculate the odometry -->
      <robotBaseFrame>base_link</robotBaseFrame>
      <!-- set to true to publish transforms for wheel links defaults to false -->
      <publishWheelTF>true</publishWheelTF>
      <!-- set to true to publish transforms for the odom defaults to false -->
      <publishOdom>true</publishOdom>
      <!-- Set to publish transforms for the odometry , defaults to true-->
      <publishWheelJointState>true</publishWheelJointState>
      <topic_name_joint>joint</topic_name_joint> 

      <covariance_x>0.0001</covariance_x>
      <covariance_y>0.0001</covariance_y>
      <covariance_yaw>0.01</covariance_yaw>

    </plugin>

  </gazebo>

  <!-- camera -->
  <gazebo reference="camera">
    <sensor type="camera" name="camera1">
      <update_rate>30.0</update_rate>
      <camera name="head">
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>800</width>
          <height>800</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <robotNamespace> </robotNamespace>
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>camera</cameraName>
        <imageTopicName>rgb/image_raw</imageTopicName>
        <cameraInfoTopicName>rgb/camera_info</cameraInfoTopicName>
        <frameName>camera</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>

  <!-- hokuyo -->
  <gazebo reference="hokuyo">
    <sensor type="ray" name="head_hokuyo_sensor">
      <pose>0 0 0 0 0 0</pose>
      <visualize>false</visualize>
      <update_rate>40</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>720</samples>
            <resolution>1</resolution>
            <min_angle>-1.570796</min_angle>
            <max_angle>1.570796</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.10</min>
          <max>30.0</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <!-- Noise parameters based on published spec for Hokuyo laser
               achieving "+-30mm" accuracy at range < 10m.  A mean of 0.0m and
               stddev of 0.01m will put 99.7% of samples within 0.03m of the true
               reading. -->
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin name="gazebo_ros_head_hokuyo_controller" filename="libgazebo_ros_laser.so">
        <topicName>/scan</topicName>
        <frameName>hokuyo</frameName>
        <robotNamespace> </robotNamespace>
      </plugin>
    </sensor>
  </gazebo>


</robot>